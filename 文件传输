"""
检查 YOLOv5 模型的类别顺序
这是导致黄灯误检的最可能原因
"""

import torch
import yaml

PT_PATH = 'runs/detect/traffic_light_expv5n/weights/best.pt'
DATA_YAML = 'data/traffic_light.yaml'  # 您的数据配置文件

print("=" * 60)
print("模型类别顺序检查")
print("=" * 60)

# 1. 检查模型中的类别名称
print("\n[1/3] 检查模型...")
try:
    ckpt = torch.load(PT_PATH, map_location='cpu')
    
    if 'model' in ckpt:
        model = ckpt['model']
    elif 'ema' in ckpt:
        model = ckpt['ema']
    else:
        model = ckpt
    
    # 获取类别名称
    if hasattr(model, 'names'):
        model_names = model.names
        print(f"✓ 模型类别名称: {model_names}")
        print(f"  类别数: {len(model_names)}")
        
        for i, name in enumerate(model_names):
            print(f"  索引 {i}: {name}")
    else:
        print("✗ 模型中未找到类别名称")
        model_names = None

except Exception as e:
    print(f"✗ 读取模型失败: {e}")
    model_names = None

# 2. 检查训练配置
print("\n[2/3] 检查训练配置...")
try:
    with open(DATA_YAML, 'r') as f:
        data_config = yaml.safe_load(f)
    
    yaml_names = data_config.get('names', [])
    print(f"✓ 配置文件类别: {yaml_names}")
    print(f"  类别数: {len(yaml_names)}")
    
    for i, name in enumerate(yaml_names):
        print(f"  索引 {i}: {name}")

except Exception as e:
    print(f"✗ 读取配置失败: {e}")
    yaml_names = None

# 3. 对比分析
print("\n[3/3] 对比分析...")

code_names = ['red', 'yellow', 'green']
print(f"代码中定义: {code_names}")

print("\n=== 诊断结果 ===")

# 检查一致性
if model_names and yaml_names:
    if model_names == yaml_names:
        print("✓ 模型和配置文件类别一致")
    else:
        print("✗ 警告：模型和配置文件类别不一致！")
        print(f"  模型: {model_names}")
        print(f"  配置: {yaml_names}")

# 检查代码一致性
if model_names:
    if model_names == code_names:
        print("✓ 模型和代码类别一致")
    else:
        print("⚠️  警告：模型和代码类别顺序可能不一致！")
        print(f"  模型: {model_names}")
        print(f"  代码: {code_names}")
        
        print("\n### 修复建议 ###")
        print("请将代码中的 LABEL_MAP 修改为：")
        print(f"LABEL_MAP = {model_names}")

# 4. 常见问题检查
print("\n=== 常见问题检查 ===")

expected_orders = [
    ['red', 'yellow', 'green'],
    ['green', 'red', 'yellow'],
    ['green', 'yellow', 'red'],
    ['red', 'green', 'yellow'],
    ['yellow', 'green', 'red'],
    ['yellow', 'red', 'green']
]

print("可能的类别顺序：")
for order in expected_orders:
    print(f"  {order}")

print("\n如果黄灯总是误检，可能的原因：")
print("1. 训练数据中黄灯样本过多")
print("2. 类别顺序不匹配（最可能）")
print("3. 黄灯特征与其他类别重叠")
print("4. 模型过拟合到黄灯")

print("\n" + "=" * 60)
print("检查完成")
print("=" * 60)
